// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RailWayInfrastructureLibrary.Data;

#nullable disable

namespace RailWayInfrastructure.Migrations
{
    [DbContext(typeof(RailWayDbContext))]
    [Migration("20220713174731_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("RailWayModelLibrary.Entities.BookedTrip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DestinationStationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfSeat")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PickupStationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SettledTrip")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStationId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("PickupStationId");

                    b.HasIndex("TrainId");

                    b.ToTable("BookedTrips");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("BloodGroup")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NOK_Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NOK_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NOK_PhoneNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NTry")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAprove")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeOfPayment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NTry")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartingTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StationAdminId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StationPhoneNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TrainArriverTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StationAdminId");

                    b.HasIndex("TrackId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Delay")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartedStationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnTrack")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NTransitPassenge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrailEngineerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartedStationId");

                    b.HasIndex("TrackId");

                    b.HasIndex("TrailEngineerId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.BookedTrip", b =>
                {
                    b.HasOne("RailWayModelLibrary.Entities.Station", "DestinationStation")
                        .WithMany()
                        .HasForeignKey("DestinationStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Payment", "Payment")
                        .WithOne("BookedTrip")
                        .HasForeignKey("RailWayModelLibrary.Entities.BookedTrip", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Station", "PickupStation")
                        .WithMany()
                        .HasForeignKey("PickupStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStation");

                    b.Navigation("Passenger");

                    b.Navigation("Payment");

                    b.Navigation("PickupStation");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Payment", b =>
                {
                    b.HasOne("RailWayModelLibrary.Entities.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Station", b =>
                {
                    b.HasOne("RailWayModelLibrary.Entities.Staff", "StationAdmin")
                        .WithMany()
                        .HasForeignKey("StationAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Track", "Track")
                        .WithMany("Stations")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationAdmin");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Train", b =>
                {
                    b.HasOne("RailWayModelLibrary.Entities.Station", "DepartedStation")
                        .WithMany()
                        .HasForeignKey("DepartedStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RailWayModelLibrary.Entities.Staff", "TrailEngineer")
                        .WithMany()
                        .HasForeignKey("TrailEngineerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartedStation");

                    b.Navigation("Track");

                    b.Navigation("TrailEngineer");
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Payment", b =>
                {
                    b.Navigation("BookedTrip")
                        .IsRequired();
                });

            modelBuilder.Entity("RailWayModelLibrary.Entities.Track", b =>
                {
                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
